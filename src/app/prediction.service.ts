import { Injectable } from '@angular/core';
import { PredictionResult } from './prediction-result';
import { HttpClient, HttpRequest, HttpEvent, HttpEventType } from '@angular/common/http';
import { tap, catchError, map, last } from 'rxjs/operators';
import { Observable, of } from 'rxjs';
import { UploadProgressService } from './upload-progress.service';


const predictionUrl = 'https://malware-revealer.ayoub-benaissa.com/cnn/v2/pred';
const predictionPingUrl = 'https://malware-revealer.ayoub-benaissa.com/ping';

@Injectable({
  providedIn: 'root'
})
export class PredictionService {

  constructor(
    private http: HttpClient,
    private uploadProgressSerivce: UploadProgressService
  ) { }

  pingApi(): Observable<boolean> {
    return this.http.get(predictionPingUrl).pipe(
      map(res => {
        return true;
      }),
      tap(message => this.log(`API ping Succeed: ${message}`)),
      catchError(this.handleError<boolean>("API ping Failed", false))
    );
  }

  sendFile(data: FormData): Observable<PredictionResult> {
    const req = new HttpRequest('POST', predictionUrl, data, { reportProgress: true });

    return this.http.request(req).pipe(
      map(event => this.getEventMessage(event)),
      tap(message => this.log(`EventMessage:` + message)),
      last<PredictionResult>(),
      catchError(this.handleError<PredictionResult>(`result failed`))
    );
  }

  private getEventMessage(event: HttpEvent<any>) {
    switch (event.type) {
      case HttpEventType.Sent:
        this.uploadProgressSerivce.set_upload()
        return `Uploading file ...`

      case HttpEventType.UploadProgress:
        const percentDone = Math.round(100 * event.loaded / event.total);
        return `File ${percentDone}% uploaded.`;

      case HttpEventType.Response:
        // return response body
        this.uploadProgressSerivce.unset_uploading()
        return event.body

      default:
        return `File surprising upload event: ${event.type}.`;
    }
  }

  private log(message: string) {
    console.log(`PredictionService: ${message}`);
  }

  private handleError<T>(operation = 'operation', result?: T) {
    return (error: any): Observable<T> => {

      // TODO: send the error to remote logging infrastructure
      console.error(error); // log to console instead

      // TODO: better job of transforming error for user consumption
      this.log(`${operation} failed: ${error.message}`);

      // Let the app keep running by returning an empty result.
      return of(result as T);
    };
  }
}
